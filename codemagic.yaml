workflows:
  android-debug:
    name: Android Debug Build - DCT CRF
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: 3.16.9 # Using specific older version that's more compatible
      java: 17 # Updated Java version for Android Gradle Plugin 8.1.0
      vars:
        PACKAGE_NAME: "com.advantage.crf" # Application ID from build.gradle
    scripts:
      - name: Set up environment
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> "$CM_BUILD_DIR/android/local.properties"
          # Print environment for debugging
          echo "Environment variables:"
          env | sort

      - name: Setup project
        script: |
          # Display Flutter and Java versions
          flutter --version
          java -version
          
          # Create a dummy keystore for debug build
          keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
          # Create a simpler gradle.properties with AndroidX settings
          echo "android.useAndroidX=true" > android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "org.gradle.jvmargs=-Xmx3072m" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.daemon=true" >> android/gradle.properties
          
          # Generate required resource directories
          mkdir -p android/app/src/main/res/drawable
          mkdir -p android/app/src/main/res/drawable-v21
          mkdir -p android/app/src/main/res/mipmap-hdpi
          mkdir -p android/app/src/main/res/mipmap-mdpi
          mkdir -p android/app/src/main/res/mipmap-xhdpi
          mkdir -p android/app/src/main/res/mipmap-xxhdpi
          mkdir -p android/app/src/main/res/mipmap-xxxhdpi
          mkdir -p android/app/src/main/res/values
          
          # Create styles.xml with simplified method
          echo -n '<?xml version="1.0" encoding="utf-8"?><resources><style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar"><item name="android:windowBackground">@android:color/white</item></style><style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar"><item name="android:windowBackground">@android:color/white</item></style></resources>' > android/app/src/main/res/values/styles.xml
          
          # Create launch backgrounds with simplified method
          echo -n '<?xml version="1.0" encoding="utf-8"?><layer-list xmlns:android="http://schemas.android.com/apk/res/android"><item><color android:color="#FFFFFF"/></item></layer-list>' > android/app/src/main/res/drawable/launch_background.xml
          echo -n '<?xml version="1.0" encoding="utf-8"?><layer-list xmlns:android="http://schemas.android.com/apk/res/android"><item><color android:color="#FFFFFF"/></item></layer-list>' > android/app/src/main/res/drawable-v21/launch_background.xml
          
          # Remove any existing XML icon files to prevent resource conflicts
          rm -f android/app/src/main/res/mipmap-*/ic_launcher.xml
          
          # Use the actual app icon from assets/images/app_icon.png
          if [ -f "assets/images/app_icon.png" ]; then
            echo "Using app_icon.png from assets/images/"
            
            # Create icons in all required sizes using the actual app icon
            convert assets/images/app_icon.png -resize 72x72 android/app/src/main/res/mipmap-hdpi/ic_launcher.png || echo "Icon conversion failed for hdpi"
            convert assets/images/app_icon.png -resize 48x48 android/app/src/main/res/mipmap-mdpi/ic_launcher.png || echo "Icon conversion failed for mdpi"
            convert assets/images/app_icon.png -resize 96x96 android/app/src/main/res/mipmap-xhdpi/ic_launcher.png || echo "Icon conversion failed for xhdpi"
            convert assets/images/app_icon.png -resize 144x144 android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png || echo "Icon conversion failed for xxhdpi"
            convert assets/images/app_icon.png -resize 192x192 android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png || echo "Icon conversion failed for xxxhdpi"
            
            echo "App icon successfully converted to all sizes"
          else
            echo "app_icon.png not found, using placeholder"
            # Fallback to placeholder if file doesn't exist
            for dir in android/app/src/main/res/mipmap-*; do
              convert -size 72x72 xc:#0056A4 "$dir/ic_launcher.png" || echo "Failed to create icon in $dir"
            done
          fi
          
          # If ImageMagick fails, copy the original PNG to all directories
          if [ ! -f "android/app/src/main/res/mipmap-hdpi/ic_launcher.png" ] && [ -f "assets/images/app_icon.png" ]; then
            echo "ImageMagick failed, copying original PNG to all directories"
            for dir in android/app/src/main/res/mipmap-*; do
              cp "assets/images/app_icon.png" "$dir/ic_launcher.png" || echo "Failed to copy icon to $dir"
            done
          fi
          
          # Clean and get dependencies
          flutter clean
          flutter pub get
          
          # Check Android setup
          flutter doctor -v
          
      - name: Setup Gradle wrapper
        script: |
          # Check Android directory structure 
          ls -la android/
          
          # Create Gradle wrapper manually
          cd android
          mkdir -p gradle/wrapper
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.5-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          
          # Download Gradle wrapper files
          curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradle/wrapper/gradle-wrapper.jar
          curl -s -o gradlew https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradlew
          curl -s -o gradlew.bat https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradlew.bat
          chmod +x gradlew
          
          # Verify wrapper is created
          ls -la gradle/wrapper/
          cd ..
          
      - name: Apply Kotlin fixes
        script: |
          # Add Kotlin fixes to android/build.gradle
          BUILD_GRADLE="$CM_BUILD_DIR/android/build.gradle"
          if [ -f "$BUILD_GRADLE" ]; then
            # Insert Kotlin resolution strategy
            sed -i '' '/rootProject.buildDir/i\
          // Add resolution strategy to fix Kotlin version conflicts\
          subprojects {\
              configurations.all {\
                  resolutionStrategy {\
                      force "org.jetbrains.kotlin:kotlin-stdlib:1.7.10"\
                      force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"\
                      force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"\
                      force "org.jetbrains.kotlin:kotlin-stdlib-common:1.7.10"\
                  }\
              }\
          }\
          ' "$BUILD_GRADLE"
          fi
          
          # Update app's build.gradle to handle Kotlin version
          APP_BUILD_GRADLE="$CM_BUILD_DIR/android/app/build.gradle"
          if [ -f "$APP_BUILD_GRADLE" ]; then
            # Add namespace if needed
            if ! grep -q "namespace" "$APP_BUILD_GRADLE"; then
              sed -i '' '/android {/a\
              namespace "com.advantage.crf"\
          ' "$APP_BUILD_GRADLE"
            fi
            
            # Update Kotlin dependencies
            sed -i '' 's/implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:\$kotlin_version"/implementation "org.jetbrains.kotlin:kotlin-stdlib:\$kotlin_version"/g' "$APP_BUILD_GRADLE"
            
            # Add proper lintOptions
            if grep -q "lintOptions" "$APP_BUILD_GRADLE"; then
              sed -i '' '/lintOptions/,/}/c\
              lintOptions {\
                  disable "InvalidPackage"\
                  disable "Deprecated"\
                  checkReleaseBuilds false\
                  abortOnError false\
              }\
          ' "$APP_BUILD_GRADLE"
            else
              sed -i '' '/android {/a\
              lintOptions {\
                  disable "InvalidPackage"\
                  disable "Deprecated"\
                  checkReleaseBuilds false\
                  abortOnError false\
              }\
          ' "$APP_BUILD_GRADLE"
            fi
            
            # Add QR scanner specific options if not already present
            if ! grep -q "aaptOptions" "$APP_BUILD_GRADLE"; then
              sed -i '' '/android {/a\
              aaptOptions {\
                  noCompress "tflite"\
                  noCompress "lite"\
                  ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"\
              }\
          ' "$APP_BUILD_GRADLE"
            fi
            
            # Add compileOptions if not already present
            if ! grep -q "compileOptions" "$APP_BUILD_GRADLE"; then
              sed -i '' '/android {/a\
              compileOptions {\
                  sourceCompatibility JavaVersion.VERSION_1_8\
                  targetCompatibility JavaVersion.VERSION_1_8\
              }\
          ' "$APP_BUILD_GRADLE"
            fi
          fi
          
          # Fix platform package
          flutter pub remove platform || true
          flutter pub add platform:3.1.3 || true
          
      - name: Build Debug APK Directly
        script: |
          # Show directory structure
          ls -la
          
          # Clean any previous build files
          flutter clean
          
          # Get dependencies again with proper verification
          flutter pub get
          
          # Build directly with Gradle for maximum control
          cd android
          chmod +x ./gradlew
          
          # Use Gradle to build debug variant
          ./gradlew assembleDebug --info
          
          # Return to project dir
          cd ..
          
          # Check if APK was generated
          find . -name "*.apk" -type f -ls
          
          # Make sure output directories exist
          mkdir -p build/app/outputs/flutter-apk
          
          # Copy any found APK to the standard location
          find android/app/build/outputs -name "*.apk" -type f -exec cp {} build/app/outputs/flutter-apk/ \;
          
          # If no APK found, try Flutter build as fallback
          if [ ! -f "build/app/outputs/flutter-apk/*.apk" ]; then
            echo "Direct Gradle build may have failed, trying Flutter build..."
            flutter build apk --debug --no-shrink
          fi
          
          # List found APKs
          find . -name "*.apk" -type f -ls
      
      - name: Copy APK to Artifact Directories
        script: |
          # Define paths and filenames
          TIMESTAMP=$(date +"%Y%m%d%H%M")
          APK_NAME="CRF_Android_debug_${TIMESTAMP}.apk"
          
          # Create all required directories
          mkdir -p "$FCI_BUILD_OUTPUT_DIR"
          mkdir -p "$CM_ARTIFACT_DIR" || true
          
          # Find all APK files
          APK_FILES=$(find . -name "*.apk" -type f | sort)
          
          if [ -z "$APK_FILES" ]; then
            echo "No APK files found! This is a critical error."
            exit 1
          fi
          
          # Get the first APK file (should be the only one or the most recent)
          SOURCE_APK=$(echo "$APK_FILES" | head -n 1)
          echo "Found source APK: $SOURCE_APK"
          
          # Copy to all required directories with proper naming
          cp "$SOURCE_APK" "$FCI_BUILD_OUTPUT_DIR/$APK_NAME"
          cp "$SOURCE_APK" "$CM_ARTIFACT_DIR/$APK_NAME" 2>/dev/null || true
          
          # Set MIME type for direct download
          echo "application/vnd.android.package-archive" > "$FCI_BUILD_OUTPUT_DIR/$APK_NAME.mime"
          echo "application/vnd.android.package-archive" > "$CM_ARTIFACT_DIR/$APK_NAME.mime" 2>/dev/null || true
          
          # Report file info
          ls -la "$FCI_BUILD_OUTPUT_DIR/$APK_NAME"
          file "$FCI_BUILD_OUTPUT_DIR/$APK_NAME"
          du -sh "$FCI_BUILD_OUTPUT_DIR/$APK_NAME"
          echo "✅ APK successfully prepared for download"
          
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/**/*.apk
      - $FCI_BUILD_OUTPUT_DIR/*.apk
    
    publishing:
      email:
        recipients:
          - devs@advantage.co.id
        notify:
          success: true
          failure: true
      scripts:
        - name: Prepare APK for Download
          script: |
            # Find the best APK
            APK_FILE=$(find . -name "*.apk" -type f | head -n 1)
            
            if [ -n "$APK_FILE" ]; then
              echo "Found APK for publishing: $APK_FILE"
              
              # Create timestamp
              TIMESTAMP=$(date +"%Y%m%d%H%M")
              
              # Define paths
              TARGET_DIR="${CM_EXPORT_DIR:-$FCI_EXPORT_DIR}"
              TARGET_NAME="CRF_Android_${TIMESTAMP}.apk"
              
              # Create directory if needed
              mkdir -p "$TARGET_DIR"
              
              # Copy and set mime type
              cp "$APK_FILE" "$TARGET_DIR/$TARGET_NAME"
              echo "application/vnd.android.package-archive" > "$TARGET_DIR/$TARGET_NAME.mime"
              
              echo "APK prepared for download: $TARGET_NAME"
            else
              echo "No APK found to publish"
            fi
      
    # Empty cache configuration to prevent hanging
    cache:
      cache_paths: []