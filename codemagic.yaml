workflows:
  android-debug:
    name: Android Debug Build - DCT CRF
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: 3.24.0 # Updated to newer stable version that supports qr_code_scanner_plus
      java: 17 # Updated Java version for Android Gradle Plugin 8.1.0
# No signing config for debug build
      vars:
        PACKAGE_NAME: "com.advantage.crf" # Application ID from build.gradle
    scripts:
      - name: Set up environment
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> "$CM_BUILD_DIR/android/local.properties"
          # Print environment for debugging
          echo "Environment variables:"
          env | sort
          
      - name: Setup project
        script: |
          # Display Flutter and Java versions
          flutter --version
          java -version
          
          # Create a dummy keystore for debug build
          keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
          # Create a simpler gradle.properties with AndroidX settings and suppress warnings
          echo "android.useAndroidX=true" > android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "org.gradle.jvmargs=-Xmx3072m" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.daemon=true" >> android/gradle.properties
          echo "android.compileSdkVersion=34" >> android/gradle.properties
          echo "android.targetSdkVersion=34" >> android/gradle.properties
          echo "android.buildToolsVersion=34.0.0" >> android/gradle.properties
          echo "android.suppressUnsupportedCompileSdk=34" >> android/gradle.properties
          
          # Generate required resource directories
          mkdir -p android/app/src/main/res/drawable
          mkdir -p android/app/src/main/res/drawable-v21
          mkdir -p android/app/src/main/res/mipmap-hdpi
          mkdir -p android/app/src/main/res/mipmap-mdpi
          mkdir -p android/app/src/main/res/mipmap-xhdpi
          mkdir -p android/app/src/main/res/mipmap-xxhdpi
          mkdir -p android/app/src/main/res/mipmap-xxxhdpi
          mkdir -p android/app/src/main/res/values
          
          # Create styles.xml with simplified method
          echo -n '<?xml version="1.0" encoding="utf-8"?><resources><style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar"><item name="android:windowBackground">@android:color/white</item></style><style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar"><item name="android:windowBackground">@android:color/white</item></style></resources>' > android/app/src/main/res/values/styles.xml
          
          # Create launch backgrounds with simplified method
          echo -n '<?xml version="1.0" encoding="utf-8"?><layer-list xmlns:android="http://schemas.android.com/apk/res/android"><item><color android:color="#FFFFFF"/></item></layer-list>' > android/app/src/main/res/drawable/launch_background.xml
          echo -n '<?xml version="1.0" encoding="utf-8"?><layer-list xmlns:android="http://schemas.android.com/apk/res/android"><item><color android:color="#FFFFFF"/></item></layer-list>' > android/app/src/main/res/drawable-v21/launch_background.xml
          
          # Remove any existing XML icon files to prevent resource conflicts
          rm -f android/app/src/main/res/mipmap-*/ic_launcher.xml
          
          # Use the actual app icon from assets/images/app_icon.png
          if [ -f "assets/images/app_icon.png" ]; then
            echo "Using app_icon.png from assets/images/"
            
            # Create icons in all required sizes using the actual app icon
            convert assets/images/app_icon.png -resize 72x72 android/app/src/main/res/mipmap-hdpi/ic_launcher.png || echo "Icon conversion failed for hdpi"
            convert assets/images/app_icon.png -resize 48x48 android/app/src/main/res/mipmap-mdpi/ic_launcher.png || echo "Icon conversion failed for mdpi"
            convert assets/images/app_icon.png -resize 96x96 android/app/src/main/res/mipmap-xhdpi/ic_launcher.png || echo "Icon conversion failed for xhdpi"
            convert assets/images/app_icon.png -resize 144x144 android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png || echo "Icon conversion failed for xxhdpi"
            convert assets/images/app_icon.png -resize 192x192 android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png || echo "Icon conversion failed for xxxhdpi"
            
            echo "App icon successfully converted to all sizes"
          else
            echo "app_icon.png not found, using placeholder"
            # Fallback to placeholder if file doesn't exist
            for dir in android/app/src/main/res/mipmap-*; do
              convert -size 72x72 xc:#0056A4 "$dir/ic_launcher.png" || echo "Failed to create icon in $dir"
            done
          fi
          
          # If ImageMagick fails, copy the original PNG to all directories
          if [ ! -f "android/app/src/main/res/mipmap-hdpi/ic_launcher.png" ] && [ -f "assets/images/app_icon.png" ]; then
            echo "ImageMagick failed, copying original PNG to all directories"
            for dir in android/app/src/main/res/mipmap-*; do
              cp "assets/images/app_icon.png" "$dir/ic_launcher.png" || echo "Failed to copy icon to $dir"
            done
          fi
          
          # Clean and get dependencies with forced package resolution
          flutter clean
          rm -rf .dart_tool/
          rm -f pubspec.lock
          flutter pub get
          
          # Force regenerate package config
          flutter pub deps
          
          # Verify package config exists
          if [ ! -f ".dart_tool/package_config.json" ]; then
            echo "Package config still missing, trying alternative approach..."
            flutter packages get
            flutter pub cache repair
            flutter pub get --offline
          fi
          
          # Check if package config now exists
          ls -la .dart_tool/
          cat .dart_tool/package_config.json | head -20
          
          # Check Android setup
          flutter doctor -v
          
      - name: Setup Gradle wrapper
        script: |
          # Check Android directory structure 
          ls -la android/
          
          # Check Android manifest and other files
          cat android/app/src/main/AndroidManifest.xml
          
          # Create Gradle wrapper manually
          cd android
          mkdir -p gradle/wrapper
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-8.0-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          
          # Download Gradle wrapper files
          curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v8.0.0/gradle/wrapper/gradle-wrapper.jar
          curl -s -o gradlew https://raw.githubusercontent.com/gradle/gradle/v8.0.0/gradlew
          curl -s -o gradlew.bat https://raw.githubusercontent.com/gradle/gradle/v8.0.0/gradlew.bat
          chmod +x gradlew
          
          # Verify wrapper is created
          ls -la gradle/wrapper/
          cd ..
          
      - name: Pre-build verification
        script: |
          # Verify all dependencies are properly resolved
          echo "Verifying Flutter and package state..."
          flutter doctor -v
          flutter pub get --verbose
          
          # Verify package config and dart_tool directory
          ls -la .dart_tool/
          if [ -f ".dart_tool/package_config.json" ]; then
            echo "Package config found - OK"
            # Verify qr_code_scanner_plus is properly resolved
            grep -q "qr_code_scanner_plus" .dart_tool/package_config.json && echo "qr_code_scanner_plus found in package config" || echo "qr_code_scanner_plus NOT found in package config"
          else
            echo "Package config missing - regenerating..."
            flutter clean
            flutter pub get
            flutter pub deps
          fi
          
          # Verify all imports can be resolved
          echo "Verifying imports and dependencies..."
          flutter analyze --no-preamble || echo "Analysis completed with warnings"
          
          # Pre-build native assets to catch any issues early
          echo "Pre-generating native assets..."
          flutter build linux --dry-run || echo "Linux dry-run failed (expected on macOS)"
          
      - name: Build APK with Flutter
        script: |
          # Configure Gradle for maximum compatibility and qr_code_scanner_plus support
          export GRADLE_OPTS="-Dorg.gradle.project.android.useAndroidX=true -Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false"
          
          # Ensure no XML launcher icons exist
          find android/app/src/main/res/mipmap-* -name "*.xml" -delete
          
          # Verify resources are properly created
          ls -la android/app/src/main/res/mipmap-hdpi/
          ls -la android/app/src/main/res/values/
          ls -la android/app/src/main/res/drawable/
          
          # Verify app icon is properly set
          echo "Verifying app icon files:"
          find android/app/src/main/res/mipmap-* -name "ic_launcher.png" -exec ls -la {} \;
          
          # Ensure dart plugin registrant is generated
          echo "Generating Dart plugin registrant..."
          flutter packages get
          
          # Force generation of native assets
          echo "Pre-generating native assets..."
          flutter build linux --dry-run || echo "Dry run completed"
          
          # Build using Flutter's default mode
          echo "Building debug APK with Flutter for DCT CRF Android..."
          flutter build apk --debug --verbose
          
          # If that fails, try with specific target platform
          if [ $? -ne 0 ]; then
            echo "First attempt failed, trying with specific target platform..."
            flutter build apk --debug --target-platform=android-arm
          fi
          
          # If that also fails, try without native assets
          if [ $? -ne 0 ]; then
            echo "Second attempt failed, trying with no-native-assets..."
            flutter clean
            flutter pub get
            flutter build apk --debug --no-native-assets || echo "No native assets build attempted"
          fi
          
          # If that also fails, try with direct Gradle command
          if [ $? -ne 0 ]; then
            echo "Flutter build attempts failed, trying with direct Gradle command..."
            cd android
            ./gradlew :app:assembleDebug --info
            cd ..
          fi
          
          # Export the APK from either location
          FLUTTER_APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          GRADLE_APK_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
          
          if [ -f "$FLUTTER_APK_PATH" ]; then
            # Export Flutter-built APK
            mkdir -p "$FCI_EXPORT_DIR"
            timestamp=$(date +"%Y%m%d%H%M")
            cp "$FLUTTER_APK_PATH" "$FCI_EXPORT_DIR/DCT-CRF-Android-debug-${timestamp}.apk"
            echo "Flutter APK successfully exported as DCT-CRF-Android-debug-${timestamp}.apk"
          elif [ -f "$GRADLE_APK_PATH" ]; then
            # Export Gradle-built APK
            mkdir -p "$FCI_EXPORT_DIR"
            timestamp=$(date +"%Y%m%d%H%M")
            cp "$GRADLE_APK_PATH" "$FCI_EXPORT_DIR/DCT-CRF-Android-debug-${timestamp}.apk"
            echo "Gradle APK successfully exported as DCT-CRF-Android-debug-${timestamp}.apk"
          else
            # If all builds failed, create a dummy APK for debugging
            echo "All build attempts failed."
            exit 1
          fi
          
      - name: Verify and finalize artifacts
        script: |
          # List all APK files in the workspace
          echo "Searching for all APK files..."
          find . -name "*.apk" -type f | sort
          
          # Ensure we always have an APK for download regardless of name
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          GRADLE_APK_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
          
          if [ -f "$APK_PATH" ]; then
            # Create artifact directories if they don't exist
            mkdir -p "$FCI_BUILD_OUTPUT_DIR" "$FCI_EXPORT_DIR" "$FCI_ARTIFACT_ROOT"
            
            # Copy to all possible artifact locations with proper naming
            cp "$APK_PATH" "$FCI_BUILD_OUTPUT_DIR/DCT-CRF-Android-final.apk"
            cp "$APK_PATH" "$FCI_ARTIFACT_ROOT/DCT-CRF-Android-final.apk"
            cp "$APK_PATH" "$CM_EXPORT_DIR/DCT-CRF-Android-final.apk" 2>/dev/null || echo "CM_EXPORT_DIR not available"
            
            echo "APK copied to all artifact locations as DCT-CRF-Android-final.apk"
          elif [ -f "$GRADLE_APK_PATH" ]; then
            mkdir -p "$FCI_BUILD_OUTPUT_DIR" "$FCI_EXPORT_DIR" "$FCI_ARTIFACT_ROOT"
            
            cp "$GRADLE_APK_PATH" "$FCI_BUILD_OUTPUT_DIR/DCT-CRF-Android-final.apk"
            cp "$GRADLE_APK_PATH" "$FCI_ARTIFACT_ROOT/DCT-CRF-Android-final.apk"
            cp "$GRADLE_APK_PATH" "$CM_EXPORT_DIR/DCT-CRF-Android-final.apk" 2>/dev/null || echo "CM_EXPORT_DIR not available"
            
            echo "Gradle APK copied to all artifact locations as DCT-CRF-Android-final.apk"
          else
            echo "No APK found to export"
          fi
    artifacts:
      - $FCI_BUILD_OUTPUT_DIR/*.apk
      - $FCI_EXPORT_DIR/*.apk
      - $FCI_ARTIFACT_ROOT/*.apk
      - build/**/outputs/**/*.apk
      - android/app/build/outputs/**/*.apk
      
    # Empty cache configuration to prevent hanging
    cache:
      cache_paths: []