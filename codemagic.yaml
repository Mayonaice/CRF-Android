workflows:
  android-debug:
    name: Android Debug Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: 3.16.9 # Using specific older version that's more compatible
      java: 11 # Downgraded Java version for compatibility
# No signing config for debug build
      vars:
        PACKAGE_NAME: "com.advantage.crf" # Application ID from build.gradle
    scripts:
      - name: Set up environment
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> "$CM_BUILD_DIR/android/local.properties"
          # Print environment for debugging
          echo "Environment variables:"
          env | sort
          
      - name: Setup project
        script: |
          # Display Flutter and Java versions
          flutter --version
          java -version
          
          # Create a dummy keystore for debug build
          keytool -genkey -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
          # Create a simpler gradle.properties with AndroidX settings
          echo "android.useAndroidX=true" > android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "org.gradle.jvmargs=-Xmx3072m" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.daemon=true" >> android/gradle.properties
          
          # Clean and get dependencies
          flutter clean
          flutter pub get
          
          # Check Android setup
          flutter doctor -v
      - name: Setup Gradle wrapper
        script: |
          # Check Android directory structure 
          ls -la android/
          
          # Check Android manifest and other files
          cat android/app/src/main/AndroidManifest.xml
          
          # Create Gradle wrapper manually
          cd android
          mkdir -p gradle/wrapper
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.4-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          
          # Download Gradle wrapper files
          curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v7.4.0/gradle/wrapper/gradle-wrapper.jar
          curl -s -o gradlew https://raw.githubusercontent.com/gradle/gradle/v7.4.0/gradlew
          curl -s -o gradlew.bat https://raw.githubusercontent.com/gradle/gradle/v7.4.0/gradlew.bat
          chmod +x gradlew
          
          # Verify wrapper is created
          ls -la gradle/wrapper/
          cd ..
          
      - name: Build APK with Gradle directly
        script: |
          # Configure Gradle 
          export GRADLE_OPTS="-Dorg.gradle.project.android.useAndroidX=true -Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false"
          
          # First update dependencies
          flutter pub get
          
          # Build directly with Gradle instead of Flutter
          echo "Building debug APK with Gradle directly..."
          cd android
          ./gradlew :app:assembleDebug --stacktrace --info
          cd ..
          
          # Check for APK in the Gradle output directory
          APK_PATH="android/app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            # Create export directory
            mkdir -p "$FCI_EXPORT_DIR"
            timestamp=$(date +"%Y%m%d%H%M")
            cp "$APK_PATH" "$FCI_EXPORT_DIR/crf-debug-${timestamp}.apk"
            echo "APK successfully exported to: $FCI_EXPORT_DIR/crf-debug-${timestamp}.apk"
            ls -la "$FCI_EXPORT_DIR"
          else
            echo "Gradle build failed. Attempting Flutter build..."
            flutter build apk --debug --target-platform=android-arm
            
            # Try the Flutter APK path
            APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
            if [ -f "$APK_PATH" ]; then
              mkdir -p "$FCI_EXPORT_DIR"
              timestamp=$(date +"%Y%m%d%H%M")
              cp "$APK_PATH" "$FCI_EXPORT_DIR/crf-debug-${timestamp}.apk"
              echo "APK successfully built with Flutter"
            else
              echo "All build attempts failed."
              exit 1
            fi
          fi
          
      - name: Verify and finalize artifacts
        script: |
          # List all APK files in the workspace
          echo "Searching for all APK files..."
          find . -name "*.apk" -type f | sort
          
          # Ensure we always have an APK for download regardless of name
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            # Create artifact directories if they don't exist
            mkdir -p "$FCI_BUILD_OUTPUT_DIR" "$FCI_EXPORT_DIR" "$FCI_ARTIFACT_ROOT"
            
            # Copy to all possible artifact locations
            cp "$APK_PATH" "$FCI_BUILD_OUTPUT_DIR/crf-debug-final.apk"
            cp "$APK_PATH" "$FCI_ARTIFACT_ROOT/crf-debug-final.apk"
            cp "$APK_PATH" "$CM_EXPORT_DIR/crf-debug-final.apk" 2>/dev/null || echo "CM_EXPORT_DIR not available"
            
            echo "APK copied to all artifact locations"
          else
            echo "No APK found to export"
          fi
    artifacts:
      - $FCI_BUILD_OUTPUT_DIR/*.apk
      - $FCI_EXPORT_DIR/*.apk
      - $FCI_ARTIFACT_ROOT/*.apk
      - build/**/outputs/**/*.apk
      - android/app/build/outputs/**/*.apk
      
    # Empty cache configuration to prevent hanging
    cache:
      cache_paths: []