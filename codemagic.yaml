workflows:
  android-debug:
    name: Android Debug Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      java: 17 # Updated from 11 to 17 for better compatibility
      xcode: latest
      cocoapods: default
      # Debug build without custom signing
      vars:
        PACKAGE_NAME: "com.advantage.crf" # Application ID from build.gradle
    scripts:
      - name: Set up environment
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          echo "sdk.dir=$ANDROID_SDK_ROOT" >> "$CM_BUILD_DIR/android/local.properties"
          # Print environment for debugging
          echo "Environment variables:"
          env | sort
          
      - name: Setup project
        script: |
          # Display Flutter and Java versions
          flutter --version
          java -version
          
          # Skip Gradle wrapper check since we'll create it later
          echo "Will set up Gradle wrapper in next step..."
          
          # Update dependencies - without clean to avoid removing prior setup
          flutter pub get
          
          # Check Android setup
          flutter doctor -v
      - name: Setup Gradle wrapper
        script: |
          # Check Android directory structure 
          ls -la android/
          
          # Create missing Gradle wrapper
          echo "Creating Gradle wrapper since it's missing..."
          cd android
          mkdir -p gradle/wrapper
          
          # Create gradle-wrapper.properties
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.5-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          
          # Download Gradle wrapper files
          curl -s -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradle/wrapper/gradle-wrapper.jar
          curl -s -o gradlew https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradlew
          curl -s -o gradlew.bat https://raw.githubusercontent.com/gradle/gradle/v7.5.0/gradlew.bat
          chmod +x gradlew
          
          # Verify setup
          ls -la gradle/wrapper/
          cat gradle/wrapper/gradle-wrapper.properties
          cd ..
          
      - name: Build APK with Flutter
        script: |
          # Use Flutter build instead of direct Gradle
          echo "Building debug APK with Flutter..."
          flutter build apk --debug
          
          # Ensure export directory exists
          mkdir -p $CM_EXPORT_DIR
          echo "Export directory: $CM_EXPORT_DIR"
          
          # Check if APK was built with Flutter
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            echo "Debug build successful. Copying APK to export directory..."
            timestamp=$(date +"%Y%m%d%H%M")
            OUTPUT_APK="$CM_EXPORT_DIR/crf-debug-${timestamp}.apk"
            cp "$APK_PATH" "$OUTPUT_APK"
            echo "Created APK at: $OUTPUT_APK"
            
            # Make sure APK is available for download
            echo "APK is available for download at: $OUTPUT_APK"
            echo "Contents of export directory:"
            ls -la $CM_EXPORT_DIR
          else
            echo "Flutter build failed. Trying with no-tree-shake-icons option..."
            flutter build apk --debug --no-tree-shake-icons
            
            if [ -f "$APK_PATH" ]; then
              echo "Build successful with no-tree-shake-icons option!"
              timestamp=$(date +"%Y%m%d%H%M")
              OUTPUT_APK="$CM_EXPORT_DIR/crf-debug-${timestamp}.apk"
              cp "$APK_PATH" "$OUTPUT_APK"
              echo "Created APK at: $OUTPUT_APK"
            else
              echo "All build attempts failed. See logs for details."
              exit 1
            fi
          fi
          
      - name: Export artifacts manually
        script: |
          # This is a failsafe step to make sure the APK is exported
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            timestamp=$(date +"%Y%m%d%H%M")
            OUTPUT_APK="$FCI_EXPORT_DIR/crf-debug-${timestamp}.apk"
            cp "$APK_PATH" "$OUTPUT_APK"
            echo "Manually exported APK to: $OUTPUT_APK"
            echo "Contents of FCI_EXPORT_DIR:"
            ls -la $FCI_EXPORT_DIR
          else
            echo "No APK found to export manually"
          fi
    artifacts:
      - $CM_EXPORT_DIR/**.apk
      - $CM_BUILD_DIR/build/app/outputs/flutter-apk/app-debug.apk
      
    # Empty cache configuration to prevent build hanging
    cache:
      cache_paths: []
    # Artifact publishing and notification
    publishing:
      scripts:
        - name: Export final artifacts
          script: |
            echo "Finding and listing all APK files..."
            find . -name "*.apk" | sort
            
            # Final attempt to get APK to artifacts
            APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
            if [ -f "$APK_PATH" ]; then
              cp "$APK_PATH" "$FCI_ARTIFACT_ROOT/crf-debug-final.apk"
              echo "Final APK exported to $FCI_ARTIFACT_ROOT/crf-debug-final.apk"
              ls -la $FCI_ARTIFACT_ROOT
            fi